to default-signal-spreading
  
  let north 1 ;; Koordinaten-Richtung: y positiv
  let south -1 ;; Koordinaten-Richtung: y negativ
  let west -1 ;; Koordinaten-Richtung: x negativ
  let east 1 ;; Koordinaten-Richtung: x positiv
  
  let i 1 ;; Zähler für die Hauptiteration
  let a 1 ;; horizontaler oder vertikaler Zähler für innere Iterationen
  
  let x 0 ;; x Position des aktuellen Patches
  let y 0 ;; y Position des aktuellen Patches
  
  let current-sn 0 ;; Abstrakte Dämpfung des exit-Signals
  let strong-signal true ;; Abbruchkriterium für Iterationen   
  
  let max-signal-noise 70 ;; Abstrakte maximale Dämpfung als Abbruchkriterium
  
  
  while [i < 50] [    ;; TODO umstellen auf Dämpfung oder abdeckung aller patches
    
                      ;; north
    set x 0
    set y ( i * north )
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange
        set signal-noise current-sn
      ]
    ]  
    
    ;; east
    set x ( i * east )
    set y 0
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]
    ]
    
    ;; south
    set x 0
    set y ( i * south )
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]
    ]
    
    ;; east
    set x ( i * west )
    set y 0
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]
    ]
    
    ;; diagonal 
    
    
    ;; north-east
    set x ( ( i - 1 ) * east )
    set y ( i * north )
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]     
    ]
    
    ;; north-east-vertical
    set strong-signal true
    set a 1
    set x ( ( i - 1 ) * east )
    
    while [strong-signal] [       
      
      set y ( i * north ) + a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ] 
    
    ;; north-east-horizontal
    set strong-signal true
    set a 1
    set y ( i * north )
    
    while [strong-signal] [       
      
      set x ( ( i - 1 ) * east ) + a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ]
    
    ;; south-east
    set x ( ( i - 1 ) * east )
    set y ( i * south )
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]
    ]
    
    ;; south-east-vertical
    set strong-signal true
    set a 1
    set x ( ( i - 1 ) * east )
    
    while [strong-signal] [       
      
      set y ( i * south ) - a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ] 
    
    ;; south-east-horizontal
    set strong-signal true
    set a 1
    set y ( i * south )
    
    while [strong-signal] [       
      
      set x ( ( i - 1 ) * east ) + a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ]
    
    ;; south-west
    set x ( ( i - 1 ) * west )
    set y ( i * south )
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]
    ]
    
    ;; south-west-vertical
    set strong-signal true
    set a 1
    set x ( ( i - 1 ) * west )
    
    while [strong-signal] [       
      
      set y ( i * south ) - a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ]     
    
    ;; south-west-horizontal
    set strong-signal true
    set a 1
    set y ( i * south )
    
    while [strong-signal] [       
      
      set x ( ( i - 1 ) * west ) - a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ]
    
    ;; north-west
    set x ( ( i - 1 ) * west )
    set y ( i * north )
    set current-sn current-signal-noise x y
    
    if (current-sn <= max-signal-noise) [
      ask patch-at x y [
        set pcolor orange        
      ]
    ]
    
    ;; north-west-vertical
    set strong-signal true
    set a 1
    set x ( ( i - 1 ) * west )
    
    while [strong-signal] [       
      
      set y ( i * north ) + a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ]     
    
    ;; north-west-horizontal
    set strong-signal true
    set a 1
    set y ( i * north )
    
    while [strong-signal] [       
      
      set x ( ( i - 1 ) * west ) - a
      set current-sn current-signal-noise x y
      
      ifelse (current-sn <= max-signal-noise) [
        
        ask patch-at x y [
          set pcolor blue        
        ]  
        
      ][
      set strong-signal false
      ]
      
      set a a + 1
    ]    
    
    set i i + 1
  ]
end



to-report current-signal-noise [x y]  
  report absolute-value(x) + absolute-value(y)  
end


to-report absolute-value [num]
  ifelse num >= 0 [
    report num
  ][
  report ( 0 - num )
  ]
end

