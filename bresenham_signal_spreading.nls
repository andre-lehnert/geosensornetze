
to bresenham-signal-spreading    
  
  while [inner-radius <= radius] [
    
    
    let x0 0
    let y0 0 
    
    let f  1 - inner-radius
    let  ddF_x  0
    let  ddF_y  -2 * inner-radius
    let  x  0
    let  y  inner-radius
    
    if ( is-available x0 ( y0 + inner-radius ) xcor ycor )  [
      ask patch-at x0 ( y0 + inner-radius ) [
       if (show-signal-spreading) [ set pcolor orange ]
      ]
    ]
    
    if ( is-available x0 (y0 - inner-radius) xcor ycor )  [
      ask patch-at x0 (y0 - inner-radius) [
        if (show-signal-spreading) [ set pcolor orange ]
      ]
    ]
    if ( is-available (x0 + inner-radius) y0 xcor ycor )  [ 
      ask patch-at (x0 + inner-radius) y0 [
       if (show-signal-spreading) [ set pcolor orange ]
      ]
    ] 
    if ( is-available (x0 - inner-radius) y0 xcor ycor )  [  
      ask patch-at (x0 - inner-radius) y0 [
        if (show-signal-spreading) [ set pcolor orange ]
      ]  
    ]
    
    let end-reached true
    
    let end-reached-1 false
    let end-reached-2 false
    let end-reached-3 false
    let end-reached-4 false
    let end-reached-5 false
    let end-reached-6 false
    let end-reached-7 false
    let end-reached-8 false
    
    while[x < y][
      
      if(f >= 0)
      [
        set y y - 1
        set ddF_y ddF_y + 2
        set f f + ddF_y
      ]
      set x x + 1
      set ddF_x ddF_x + 2
      set f f + ddF_x + 1
      
      
      ifelse ( is-available (x0 + x) (y0 + y) xcor ycor )  [
        ask patch-at (x0 + x) (y0 + y) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-1 true
      ]
      
      ifelse ( is-available (x0 - x) (y0 + y) xcor ycor )  [
        ask patch-at (x0 - x) (y0 + y) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-2 true
      ]
      
      ifelse ( is-available (x0 + x) (y0 - y) xcor ycor )  [
        ask patch-at (x0 + x) (y0 - y) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-3 true
      ]
      
      ifelse ( is-available (x0 - x) (y0 - y) xcor ycor )  [
        ask patch-at (x0 - x) (y0 - y) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-4 true
      ]
      
      ifelse ( is-available (x0 + y) (y0 + x) xcor ycor )  [    
        ask patch-at (x0 + y) (y0 + x) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-5 true
      ]
      
      ifelse ( is-available (x0 - y) (y0 + x) xcor ycor )  [
        ask patch-at (x0 - y) (y0 + x) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-6 true
      ]
      
      ifelse ( is-available (x0 + y) (y0 - x) xcor ycor )  [
        ask patch-at (x0 + y) (y0 - x) [
          if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-7 true
      ]
      
      ifelse ( is-available (x0 - y) (y0 - x) xcor ycor )  [
        ask patch-at (x0 - y) (y0 - x) [
         if (show-signal-spreading) [ set pcolor orange ]
        ]
      ][
      set end-reached-8 true
      ]
    ]
    
    set inner-radius inner-radius + 1
    
    set end-reached (end-reached-1 and end-reached-2 and end-reached-3 and end-reached-4 and end-reached-5 and end-reached-6 and end-reached-7 and end-reached-8)
    
  ]
  
end