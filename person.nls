;; Person

persons-own [
  state ;; Status im Lebenszyklus
]

to person-state [newstate]
  
  set state newstate
  
  ;; Start
  if state = "INIT" [
    set size 15
    set shape "person"
    set color brown
    set heading 0
    set label-color black
  ]
  
  if state = "EVENT_DETECTED" [
    set label "!"
  ]  
  
  if state = "FLEEING" [
    set label "*"
  ]  
  
  ;; Ende
  if state = "RESCUED" [
    die ;; turtle von der Karte entfernen
  ] 
  
  if state = "DEAD" [
    set color grey    
    set shape "person_dead" ;; selbsterstellte Shape: rotierbar
    set heading 45
    set label ""    
  ]
  
end


;; Zufällige Platzierung von Personen
to setup-persons
  
  if inputFile = "Abstract.png" [ ;; Zufällige Platzierung
    create-persons personCount [setxy random-pxcor random-pycor]
  ]
  if inputFile = "Simple.png" [ ;; Zufällige Platzierung mit Wand-Detektion
    place-persons
  ]
  if inputFile = "ikg.png" [ ;; Zufällige Platzierung mit Wand-Detektion
    place-persons
  ]
  if inputFile = "Raumplan.png" [ ;; Zufällige Platzierung mit Wand-Detektion
    place-persons
  ] 
  
  ;; Verlinkung aller Personen, Kommunikation wird per Distance eingeschränkt
  createGG
   
  ask persons [       
    person-state("INIT")
  ]
  
end

to place-persons
  
  create-persons personCount [
    
    let y random-pycor
    let x random-pxcor
    
    while [[pcolor] of patch x y != white] [
      
      set y random-pycor
      set x random-pxcor
      
    ]
    
    setxy x y 
    
  ]
  
end


to random-move
  
  let g random-float 1.00000001 ;; Wahrscheinlichkeit g
  let probability    0.00000001 ;; float initialisieren ?!
  set probability ( walk-propability / 100 )
  
  if g <= probability [
    
    let nb one-of neighbors
    
    while [[patch-state] of nb = "WALL"] [
      set nb one-of neighbors   
    ]
    
    face nb
    forward 1
    
    let me self
    
    ask link-neighbors [ 
      
      ifelse distance myself <= person-detection-radius [ 
         
         ask link-with me [
           set shape "connect"
           set color blue
         ]
         
      ][
         ask link-with me [
           set shape "communication"
           set color grey
         ]
         
      ]
    ]
  ]  
  
  ;; Person kommt in Kontakt mit dem Giftgas und stirbt
  if [patch-state] of patch-here = "EVENT" or [patch-state] of patch-here = "EVENT-DONE"[
    
    person-state("DEAD")
    
  ]
  
end


to createCompleteGraph
  clear-links
  foreach sort persons [    
      ask persons [
        if state != "DEAD" [                  
          if distance ? > 0 [create-link-with ? ]   
           
        ]
      ]   
  ] 
  
end
 
to createGG
  createCompleteGraph
  foreach sort persons [
    
    
      ask ? [
        if state != "DEAD" [
        let u ?
        foreach sort link-neighbors [
          let v ?
          let distuv distance v
          ifelse all? link-neighbors [isPlanar u v distuv "GG"] [] [ask link-with v [set color red hide-link ]]
        ]
      ]
    ]
  ]
  ask links with [color = red] [die]
 
  
end 

to-report isPlanar[u v distuv graphtype]
  ifelse graphtype = "RNG"
  [report isRNG u v distuv] [report isGG u v distuv]
  
end


to-report isRNG [u v distuv]
   ifelse distance u >= distuv or distance v >= distuv
    [report true]
    [report false]
end 


to-report isGG [u v distuv]
  ifelse ((distance u) ^ 2) + ((distance v) ^ 2)  >= (distuv ^ 2)
    [report true]
    [report false]

end





to person-detect-event
  
  let detect-event false
  
  ask patches in-radius person-detection-radius [
    
    if patch-state = "EVENT" or patch-state = "EVENT_DONE" [
      
      set detect-event true
      
    ]
    
  ]
  
  if detect-event [
    
    person-state "EVENT_DETECTED"
    
  ]
  
end


to person-notify-neighbors
  
  if state = "EVENT_DETECTED" [
    
    
    
    person-state "FLEEING"
    
  ]
  
end


to person-flee
  
  if state = "FLEEING" [
    
    person-move-to-exit
    
  ]
  
end


to person-move-to-exit
  
  let g random-float 1.00000001 ;; Wahrscheinlichkeit g
  let probability    0.00000001 ;; float initialisieren ?!
  set probability ( walk-propability / 100 )
  
  if g <= probability [
    
    let direction one-of neighbors
    ;let min-noise exit-signal-strength + 1 ;; min auf maximalen wert + 1 gesetzt
    let this-noise [signal-noise] of patch-here
    
    foreach sort neighbors [
      
      if [patch-state] of ? != "WALL" and [patch-state] of ? != "EVENT" and [patch-state] of ? != "EVENT_DONE" [
        
        if [signal-noise] of ? < this-noise [          
          set direction ?
        ]
        
        ;if [signal-noise] of ? < min-noise [
        ;  set min-noise [signal-noise] of ?
        ;  set direction ?
        ;]
      ]      
    ]  
    
    face direction
    forward 1
    
  ]  
  
  ;; Person kommt in Kontakt mit dem Giftgas und stirbt
  if [patch-state] of patch-here = "EVENT" or [patch-state] of patch-here = "EVENT-DONE"[
    
    person-state("DEAD")
    
  ]
  
end


to person-reach-exit
  
  let rescue false
  
  ask patch-here [
    
    let my-x pxcor
    let my-y pycor
    
    ask exits [
      
      if (my-x = xcor and my-y = ycor) [
        set rescue true
      ]
      
    ]
    
  ]
  
  if rescue [
    
    person-state "RESCUED"
    
  ]
  
end