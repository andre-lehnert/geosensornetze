to init-decentral-signal-spreading  
  
  ask exits [    
    
    let exit-id who
    
    ask patch-here [ ;; Initialisierung des Patches unter einem exit
      
      if (patch-state = "NONE") [ 
        
        set patch-state "SPREADING"   
        
        array:set exits-in-range exit-id myself
        array:set signal-noises exit-id 0
        
        
        
        
      ]      
    ]    
  ]
  
  
end

to-report nearest-exit-signal [noises]
  
  let i 0
  let exit-id -1
  let min-exit-signal 10000
  
  while [i < array:length noises] [
    
    if array:item signal-noises i != -1 and array:item signal-noises i < min-exit-signal [
      set min-exit-signal array:item noises i
      set exit-id i
    ]   
    set i (i + 1)
  ]
  
  report exit-id
  
end

to decentral-signal-spreading
  let i 0
  
  while [i < exit-signal-strength] [
    
    ask patches [
      
      ;; spread-signal-to-neighbors4 ;; 4 Nachbarn (Nord, Ost, SÃ¼d, West)
      if patch-state = "SPREADING"  [         
        
        let parent-min-noise -1
        let parent-nearest-exit -1
        let parent-pointer -1
        
        let j 0        
        while [j < array:length signal-noises] [
          
          if parent-min-noise <= array:item signal-noises j [
            
            set parent-min-noise array:item signal-noises j
            set parent-nearest-exit array:item exits-in-range j
            set parent-pointer j
            
          ]        
          
          set j (j + 1)
        ]
        
        let all-done true
        
        ask neighbors4 [         
          
          if (patch-state = "IDLE") [ 
            
            if array:item signal-noises parent-pointer = -1 [
              array:set exits-in-range parent-pointer parent-nearest-exit
              array:set signal-noises parent-pointer parent-min-noise + 1                
            ] 
            
            set j 0  
            let is-done true     
            while [j < array:length signal-noises] [
              
              if array:item signal-noises j = -1 [
                set is-done false 
                set all-done false                 
              ]        
              
              set j (j + 1)
            ]
            
            if not is-done [
              set patch-state "SPREADING"         
            ]
          ]
          
          if (patch-state = "SPREADING") [ 
            
            if array:item signal-noises parent-pointer = -1 [
              array:set exits-in-range parent-pointer parent-nearest-exit
              array:set signal-noises parent-pointer parent-min-noise + 1                
            ] 
          ]
          
          if (patch-state = "NONE") [             
            
            set patch-state "SPREADING"
            
            array:set exits-in-range parent-pointer parent-nearest-exit
            array:set signal-noises parent-pointer parent-min-noise + 1
            
            print-signal-spreading
          ]   
          
          
          set j 0  
          let is-done true     
          while [j < array:length signal-noises] [
            
            if array:item signal-noises j = -1 [
              set is-done false 
              set all-done false                 
            ]        
            
            set j (j + 1)
          ]
          
          if is-done [
            ; set patch-state "IDLE"
            ;set pcolor blue
          ]
        ]
        
        if all-done [
          set patch-state "IDLE"          
        ]       
      ]
      
      ;;------------------------------------------------------------------------
      
      
      if patch-state = "IDLE" [
        
        let parent-min-noise -1
        let parent-nearest-exit -1
        let parent-pointer -1
        
        let j 0        
        while [j < array:length signal-noises] [
          
          if parent-min-noise <= array:item signal-noises j [
            
            set parent-min-noise array:item signal-noises j
            set parent-nearest-exit array:item exits-in-range j
            set parent-pointer j
            
          ]        
          
          set j (j + 1)
        ]
        
        let all-done true
        
        ask neighbors4 [
          
          if (patch-state = "IDLE") [ 
            
            if array:item signal-noises parent-pointer = -1 [
              array:set exits-in-range parent-pointer parent-nearest-exit
              array:set signal-noises parent-pointer parent-min-noise + 1                
            ] 
            
            set j 0  
            let is-done true     
            while [j < array:length signal-noises] [
              
              if array:item signal-noises j = -1 [
                set is-done false 
                set all-done false                 
              ]        
              
              set j (j + 1)
            ]
            
          ]
          
          
          if (patch-state = "SPREADING") [ 
            
            if array:item signal-noises parent-pointer = -1 [
              array:set exits-in-range parent-pointer parent-nearest-exit
              array:set signal-noises parent-pointer parent-min-noise + 1                
            ] 
            
            set j 0  
            let is-done true     
            while [j < array:length signal-noises] [
              
              if array:item signal-noises j = -1 [
                set is-done false 
                set all-done false                 
              ]        
              
              set j (j + 1)
            ]
            
            if is-done [
              set patch-state "IDLE"              
            ]
          ]
          
          
        ]
        
        if all-done [
          set patch-state "DONE"         
        ]
        if not all-done [
          set patch-state "SPREADING"
        ]
      ]
      ;;------------------------------------------------------------------------
      
    ]
    set i (i + 1)
  ]
  
  
  ask patches [
   if patch-state != "WALL" [
     set patch-state "DONE"
     set pcolor white 
   ]
  ]
end


to-report nearest-exit [this-patch]
  
  let noises [signal-noises] of this-patch
  let this-exits [exits-in-range] of this-patch
  
  let pointer -1        
  let j 0  
  let this-noise 10000 
  let this-exit -1
  
  while [j < array:length noises] [
    
    if array:item noises j != -1 and this-noise > array:item noises j [
      
      set this-noise array:item noises j
      set this-exit array:item this-exits j
      set pointer j
      
    ]        
    
    set j (j + 1)
  ]
  
  report this-exit
  
end


to print-signal-spreading
  
  if (not hide-signal-spreading) [ 
    let patch-color 0 
    ask nearest-exit self [ set patch-color signal-color ]
    set pcolor patch-color  
  ]
  
end
